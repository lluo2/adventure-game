#BlueJ class context
comment0.params=
comment0.target=AdjMatGraph()
comment0.text=\r\n\ \ \ \ Constructor.\ Creates\ an\ empty\ graph.\r\n
comment1.params=g
comment1.target=AdjMatGraph(AdjMatGraph)
comment1.text=\r\n\ Construct\ a\ copy\ (clone)\ of\ a\ given\ graph.\r\n\ The\ new\ graph\ will\ have\ all\ the\ same\ vertices\ and\ arcs\ as\ the\ original.\r\n\ A\ *shallow*\ copy\ is\ performed\:\ the\ graph\ structure\ is\ copied,\ but\r\n\ the\ new\ graph\ will\ refer\ to\ the\ exact\ same\ vertex\ objects\ as\ the\ original.\r\n
comment10.params=srcIndex\ destIndex
comment10.target=boolean\ isArc(int,\ int)
comment10.text=\r\n\ \ \ \ Returns\ true\ iff\ an\ arc\ exists\ between\ two\ given\ indices.\ \r\n\ \ \ \ @throws\ IllegalArgumentException\ if\ either\ index\ is\ invalid.\r\n
comment11.params=srcVertex\ destVertex
comment11.target=boolean\ isEdge(java.lang.Object,\ java.lang.Object)
comment11.text=\r\n\ \ \ \ Returns\ true\ iff\ an\ edge\ exists\ between\ two\ given\ vertices\r\n\ \ \ \ which\ means\ that\ two\ corresponding\ arcs\ exist\ in\ the\ graph.\r\n
comment12.params=
comment12.target=boolean\ isUndirected()
comment12.text=\r\n\ \ \ \ Returns\ true\ IFF\ the\ graph\ is\ undirected,\ that\ is,\ for\ every\ \r\n\ \ \ \ pair\ of\ nodes\ i,j\ for\ which\ there\ is\ an\ arc,\ the\ opposite\ arc\r\n\ \ \ \ is\ also\ present\ in\ the\ graph.\ \ \r\n
comment13.params=vertex
comment13.target=void\ addVertex(java.lang.Object)
comment13.text=\r\n\ \ \ \ Adds\ a\ vertex\ to\ the\ graph,\ expanding\ the\ capacity\ of\ the\ graph\r\n\ \ \ \ if\ necessary.\ \ If\ the\ vertex\ already\ exists,\ it\ does\ not\ add\ it\ again.\r\n
comment14.params=
comment14.target=void\ expandCapacity()
comment14.text=\r\n\ \ \ \ Helper.\ Creates\ new\ arrays\ to\ store\ the\ contents\ of\ the\ graph\ \r\n\ \ \ \ with\ twice\ the\ capacity.\r\n
comment15.params=vertex
comment15.target=void\ removeVertex(java.lang.Object)
comment15.text=\r\n\ \ \ \ Removes\ a\ single\ vertex\ with\ the\ given\ value\ from\ the\ graph.\ \ \r\n\ \ \ \ Uses\ equals()\ for\ testing\ equality.\r\n
comment16.params=index
comment16.target=void\ removeVertex(int)
comment16.text=\r\n\ \ \ \ Helper.\ Removes\ a\ vertex\ at\ the\ given\ index\ from\ the\ graph.\ \ \ \r\n\ \ \ \ Note\ that\ this\ may\ affect\ the\ index\ values\ of\ other\ vertices.\r\n\ \ \ \ @throws\ IllegalArgumentException\ if\ the\ index\ is\ invalid.\r\n
comment17.params=vertex1\ vertex2\ weight
comment17.target=void\ addEdge(java.lang.Object,\ java.lang.Object,\ int)
comment17.text=\r\n\ \ \ \ Inserts\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\r\n\ \ \ \ If\ one\ or\ both\ vertices\ do\ not\ exist,\ ignores\ the\ addition.\r\n\ \ \ \ An\ edge\ cannot\ be\ pointed\ to\ itself\ therefore\ is\ omitted.\r\n
comment18.params=srcVertex\ destVertex\ weight
comment18.target=void\ addArc(java.lang.Object,\ java.lang.Object,\ int)
comment18.text=\r\n\ \ \ \ Inserts\ an\ arc\ from\ srcVertex\ to\ destVertex.\r\n\ \ \ \ If\ the\ vertices\ exist,\ else\ does\ not\ change\ the\ graph.\ Method\r\n\ \ \ \ doesn't\ allow\ the\ vertex\ to\ ave\ an\ edge\ to\ itself.\r\n
comment19.params=srcIndex\ destIndex\ weight
comment19.target=void\ addArc(int,\ int,\ int)
comment19.text=\r\n\ \ \ \ Helper.\ Inserts\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\ Note,\ an\ arc\r\n\ \ \ \ does\ not\ point\ to\ itself\ in\ the\ context\ of\ our\ game\ therefore\ the\ ability\ has\r\n\ \ \ \ been\ omitted.\r\n\ \ \ \ @throws\ IllegalArgumentException\ if\ either\ index\ is\ invalid.\r\n
comment2.params=tgf_file_name\ g
comment2.target=void\ loadTGF(java.lang.String,\ AdjMatGraph)
comment2.text=\r\n\ Load\ vertices\ and\ edges\ from\ a\ TGF\ file\ into\ a\ given\ graph.\r\n\ @param\ tgfFile\ -\ name\ of\ the\ TGF\ file\ to\ read\r\n\ @param\ g\ -\ graph\ to\ which\ vertices\ and\ arcs\ will\ be\ added.\r\n\ \ \ \ \ \ \ \ \ \ \ \ g\ must\ be\ empty\ to\ start\!\r\n\ @throws\ FileNotFoundException\ \r\n
comment20.params=vertex1\ vertex2
comment20.target=void\ removeEdge(java.lang.Object,\ java.lang.Object)
comment20.text=\r\n\ \ \ \ Removes\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\r\n\ \ \ \ If\ one\ or\ both\ vertices\ do\ not\ exist,\ ignores\ the\ removal.\r\n
comment21.params=srcVertex\ destVertex
comment21.target=void\ removeArc(java.lang.Object,\ java.lang.Object)
comment21.text=\r\n\ \ \ \ Removes\ an\ arc\ from\ vertex\ src\ to\ vertex\ dest,\r\n\ \ \ \ if\ the\ vertices\ exist,\ else\ does\ not\ change\ the\ graph.\ \r\n
comment22.params=srcIndex\ destIndex
comment22.target=void\ removeArc(int,\ int)
comment22.text=\r\n\ \ \ \ Helper.\ Removes\ an\ arc\ from\ index\ v1\ to\ index\ v2.\r\n\ \ \ \ @throws\ IllegalArgumentException\ if\ either\ index\ is\ invalid.\r\n
comment23.params=vertex
comment23.target=int\ getIndex(java.lang.Object)
comment23.text=\r\n\ \ \ \ Returns\ the\ index\ value\ of\ the\ first\ occurrence\ of\ the\ vertex.\r\n\ \ \ \ Returns\ NOT_FOUND\ if\ the\ key\ is\ not\ found.\r\n
comment24.params=vertex1\ vertex2
comment24.target=int\ getWeight(java.lang.Object,\ java.lang.Object)
comment24.text=\r\n\ Returns\ the\ weight\ of\ the\ edge\ from\ the\ one\ vertex\ to\ another.\r\n\ \ \ \ If\ no\ edge\ is\ present,\ returns\ -1.\r\n\ @param\:\ T\ vertex1,\ T\ vertex2\ @return\ int\r\n
comment25.params=v
comment25.target=java.lang.Object\ getVertex(int)
comment25.text=\r\n\ \ \ \ Returns\ the\ vertex\ object\ that\ is\ at\ a\ certain\ index\r\n
comment26.params=index
comment26.target=boolean\ indexIsValid(int)
comment26.text=\r\n\ \ \ \ Returns\ true\ if\ the\ given\ index\ is\ valid.\ \r\n
comment27.params=vertex
comment27.target=java.util.LinkedList\ getPredecessors(java.lang.Object)
comment27.text=\r\n\ \ \ \ Retrieve\ from\ a\ graph\ the\ vertices\ x\ pointing\ to\ vertex\ v\ (x->v)\r\n\ \ \ \ and\ returns\ them\ onto\ a\ linked\ list\r\n
comment28.params=vertex
comment28.target=java.util.LinkedList\ getSuccessors(java.lang.Object)
comment28.text=\r\n\ Retrieve\ from\ a\ graph\ the\ vertices\ x\ following\ vertex\ v\ (v->x)\r\n\ \ \ \ and\ returns\ them\ onto\ a\ linked\ list\r\n
comment29.params=
comment29.target=java.lang.String\ toString()
comment29.text=\r\n\ \ \ \ Returns\ a\ string\ representation\ of\ the\ graph.\ \r\n
comment3.params=
comment3.target=java.util.Iterator\ iterator()
comment3.text=\r\n\ Create\ a\ new\ iterator\ that\ will\ iterate\ over\ the\ vertices\ of\ the\ array\ when\ asked.\r\n\ @return\ the\ new\ iterator.\r\n
comment30.params=tgf_file_name
comment30.target=void\ saveTGF(java.lang.String)
comment30.text=\r\n\ Saves\ the\ current\ graph\ into\ a\ .tgf\ file.\r\n\ If\ it\ cannot\ save\ the\ file,\ a\ message\ is\ printed.\ \r\n
comment31.params=args
comment31.target=void\ main(java.lang.String[])
comment31.text=Testing\ Driver\ for\ AdjMatGraph.\ \ This\ will\ not\ help\ you\ test\ AdjMatGraphPlus.
comment4.params=vertex
comment4.target=boolean\ containsVertex(java.lang.Object)
comment4.text=\r\n\ Check\ if\ the\ graph\ contains\ the\ given\ vertex.\r\n
comment5.params=
comment5.target=boolean\ isEmpty()
comment5.text=\r\n\ \ \ \ Returns\ true\ if\ the\ graph\ is\ empty\ and\ false\ otherwise.\ \r\n
comment6.params=
comment6.target=int\ n()
comment6.text=\r\n\ \ \ \ Returns\ the\ number\ of\ vertices\ in\ the\ graph.\r\n
comment7.params=
comment7.target=int\ m()
comment7.text=\r\n\ \ \ \ Returns\ the\ number\ of\ arcs\ in\ the\ graph\ by\ counting\ them.\r\n
comment8.params=
comment8.target=java.lang.Object[]\ getVertices()
comment8.text=\r\n\ Returns\ array\ of\ all\ vertices.\r\n
comment9.params=srcVertex\ destVertex
comment9.target=boolean\ isArc(java.lang.Object,\ java.lang.Object)
comment9.text=\r\n\ \ \ \ Returns\ true\ iff\ a\ directed\ edge\ exists\ from\ v1\ to\ v2.\r\n
numComments=32
