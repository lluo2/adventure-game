#BlueJ class context
comment0.params=
comment0.target=boolean\ isEmpty()
comment0.text=Returns\ true\ if\ this\ graph\ is\ empty,\ false\ otherwise.
comment1.params=
comment1.target=int\ n()
comment1.text=Returns\ the\ number\ of\ vertices\ in\ this\ graph.
comment10.params=vertex1\ vertex2\ weight
comment10.target=void\ addEdge(java.lang.Object,\ java.lang.Object,\ int)
comment10.text=\ Inserts\ an\ edge\ between\ two\ vertices\ of\ this\ graph,\r\nif\ the\ vertices\ exist.\ Else\ does\ not\ change\ the\ graph.
comment11.params=vertex1\ vertex2
comment11.target=void\ removeEdge(java.lang.Object,\ java.lang.Object)
comment11.text=\ Removes\ an\ edge\ between\ two\ vertices\ of\ this\ graph,\r\nif\ the\ vertices\ exist,\ else\ does\ not\ change\ the\ graph.
comment12.params=vertex
comment12.target=java.util.LinkedList\ getSuccessors(java.lang.Object)
comment12.text=\ Retrieve\ from\ a\ graph\ the\ vertices\ x\ following\ vertex\ v\ (v->x)\r\nand\ returns\ them\ onto\ a\ linked\ list
comment13.params=vertex
comment13.target=java.util.LinkedList\ getPredecessors(java.lang.Object)
comment13.text=\ Retrieve\ from\ a\ graph\ the\ vertices\ x\ pointing\ to\ vertex\ v\ (x->v)\r\nand\ returns\ them\ onto\ a\ linked\ list
comment14.params=
comment14.target=java.lang.String\ toString()
comment14.text=Returns\ a\ string\ representation\ of\ the\ adjacency\ matrix.
comment15.params=tgf_file_name
comment15.target=void\ saveTGF(java.lang.String)
comment15.text=\ Saves\ the\ current\ graph\ into\ a\ .tgf\ file.\r\nIf\ it\ cannot\ save\ the\ file,\ a\ message\ is\ printed.
comment2.params=
comment2.target=int\ m()
comment2.text=Returns\ the\ number\ of\ arcs\ in\ this\ graph.
comment3.params=vertex1\ vertex2
comment3.target=boolean\ isArc(java.lang.Object,\ java.lang.Object)
comment3.text=Returns\ true\ iff\ a\ directed\ edge\ exists\ from\ v1\ to\ v2.
comment4.params=vertex1\ vertex2
comment4.target=boolean\ isEdge(java.lang.Object,\ java.lang.Object)
comment4.text=\ Returns\ true\ iff\ an\ edge\ exists\ between\ two\ given\ vertices\r\nwhich\ means\ that\ two\ corresponding\ arcs\ exist\ in\ the\ graph
comment5.params=
comment5.target=boolean\ isUndirected()
comment5.text=\ Returns\ true\ IFF\ the\ graph\ is\ undirected,\ that\ is,\ for\ every\r\n\ pair\ of\ nodes\ i,j\ for\ which\ there\ is\ an\ arc,\ the\ opposite\ arc\r\nis\ also\ present\ in\ the\ graph.
comment6.params=vertex
comment6.target=void\ addVertex(java.lang.Object)
comment6.text=\ Adds\ a\ vertex\ to\ this\ graph,\ associating\ object\ with\ vertex.\r\nIf\ the\ vertex\ already\ exists,\ nothing\ is\ inserted.
comment7.params=vertex
comment7.target=void\ removeVertex(java.lang.Object)
comment7.text=\ Removes\ a\ single\ vertex\ with\ the\ given\ value\ from\ this\ graph.\r\nIf\ the\ vertex\ does\ not\ exist,\ it\ does\ not\ change\ the\ graph.
comment8.params=vertex1\ vertex2\ weight
comment8.target=void\ addArc(java.lang.Object,\ java.lang.Object,\ int)
comment8.text=\ \ \ \ \ Inserts\ an\ arc\ from\ vertex1\ to\ vertex2.\r\nIf\ the\ vertices\ exist.\ Else\ it\ does\ not\ change\ the\ graph.
comment9.params=vertex1\ vertex2
comment9.target=void\ removeArc(java.lang.Object,\ java.lang.Object)
comment9.text=\ Removes\ an\ arc\ from\ vertex\ v1\ to\ vertex\ v2,\r\nif\ the\ vertices\ exist.\ Else\ it\ does\ not\ change\ the\ graph.
numComments=16
